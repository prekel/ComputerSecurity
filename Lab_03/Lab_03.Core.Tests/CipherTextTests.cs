using System;
using System.Collections.Generic;
using System.Linq;

using NUnit.Framework;

namespace Lab_03.Core.Tests
{
    public class CipherTextTests
    {
        [Test]
        public void Test1()
        {
            var c = new CipherText("я хочу, пицу!");

            Assert.That(c.CipherTextOriginal, Is.EqualTo("я хочу, пицу!"));
            Assert.That(c.CipherTextOnlyLetters, Is.EqualTo("яхочупицу"));

            c.TextOnlyLetters = "имогугиху";
            Assert.That(c.TextOnlyLetters, Is.EqualTo("имогугиху"));

            Assert.That(c.Text, Is.EqualTo("и могу, гиху!"));
        }

        [Test]
        public void Test1Var()
        {
            var t =
                "ЦЬЦЬИУЯ БОЫАОУШ ЛЙЦ ГЧЙДРЫУШ Х ЧЦХОШАТС, ЕЪЬЫЬЫНШВЦЧ ЪСУЩШУ: НЯУАОФОЧЦ М СЩЧЬНУСБХЦЦ РСТ ПЮЫАЗ ЬЦМСМОЦОХБ ГКПЦМИЕИПЩЗЫТЦИТМ, ЬЬТЖЖКФРЫМКВ, НЦМШМС ЕШЮЖРТС ЕЪЦМЩММЮЬКЬН ЕУБПУ Х ЭФНЖШТР. \"ЯРУИЪЦ, МЮДЧ, - ЩШРЩЮМР ЫЦБ ШУ ФЕЭ ПСЩ ЭФУКПЯЬЬФ, - Ш ИППК УХЧТ ЬОЦОСЧ; ЩЪУГЫТ ЖЙОУЭ, УХРЮ ЬЙ РСТ ФДНБМЦЬБ. ГШ АЖ ЫЙЧЫЪЭРЩМЗ. ИППК ЬИТД БАЩ-ЫМЖЙОК ТОРЕГТА, ЩТСУ НЬЬ-ШЦЕШЪЖ АРПЙ ФДХММЦЦЦХ - ЬЙ УЪ ЛЕГЙА, Л ЭФУНПУ Ю АЙЖХ ОЮКЫА, ФЖШЕРУ ЦКЧП ЫУЭТЬЫЦ, АЖ БК Н ЩХНПУЦБ ГК ЫРСТ ТЫ ЯЬВУЬБ. ЗЦЬЭЮМ, ЬИШП УХ ЦКЧЙ ЫР РЯЭЫХ ЪЩТСАЯ РЦНЬУНЗПД. Ю АЙЖХ Т АРЭЙХТ ЭФР ЕЦУ-ИШ ЫЛЕМТЦИА ЬЩМЭАШЪ МЬНПД ФЮУЕДЧТ ФЮЛЯОН. ЖТЯЮЫТП Й ЬУМН СК ЗЬЮЩС, Д ФДОЕЛЯ М ЗДМЯР ЯПЕЧ, ХЦШЦГ ТЫ МЦПЫД; ЧС ЭФ ОЬСДЫВКЬН ЛЕ ВШТШЙР УЗМУДУСНЫЦ, ХЛ АЙС, НЬЬ МКЙЧ ГК ЭРЮЖАЫ НЩЛХД. ЦВШАЫЦ, ОЕА ЪОТ ЭТФЦОУГК Ж ЕГНЩУЧХПЮУ ЮЩТ. ЕКЖПСУЯА; ЧЫЛН ЮФ СЕНТЫЛУЦ ЦШПА ЭНСШИЖ; БС Н ЖНЬЭ Б ЭУЕД ЮЧЬФ ЮДМ ГК ЖРУ ЭКЩШЩЗЯОУЯ ЩЩЛАТП, ОХНЪО Х РДЫШЩЪ... ТТД СОЧОСЬЮМЬ, ЧЬКТД ЩБЬАМЧТЫН ЪЦХЕИЖ ЪЩТСАЫ ФОЫАМТАТ, ЭЩЮЦХЫЬЦХЦ ЛЕ ЪПЫЗСМ. ЙЦ МУПК СЕ УЬЬЧ СЧЖЮЬЯК, О СК ЖКХНУФЧСМОРАХД ИКЩЛЫЦ. ЧЫЪЭУ. ЬЕЙЙЦЙНОН ЗЗЙШЮМ ФЕЧШАЮ, ПФУЗЖ ЗРСТРТЫАНЬ - УШЗЬК УГ СЕЧТЮЛМЦ ЙЖЭСУУ ИКГЖСУ. АЖУЫ ША ЭУЕД ГП БФТЙЧ\". ЕЪЬЯУХЦДЪ ПЖЩ ТЧНКЯЭЦ УХЦМ. ЦШЬЗЙЦ ЯЬЭУПУЗЖ, АЩЕСУ, ГКЖРЪЧ ЪЙОЬСЫМПЙ ФБЭЫЧЧТ, ГУОЬПБГЭАЗ - ЯПУШШЪ, ХЬЙ-ИЪП ЭЩШДМЦЬК ЬРТГ ВШЩЩТТЦИЖ. ЫЩ ЭФН ШЫУЧ АТС ДЧ ЪЩС ЖМХЬК ШОИ ЦДЛЬЙ РПЕЗЬК. НЮЙСЫЧОЧЦ ТТ ВШС ЪЬЛЕЧЕАЗ РХК, ЕЪЦШНЖЭЮЫК ТО ОНЗЬК, У ЬЦХСМОЦЯГ УИ ЧУР ЫЙ НГКЕР, ШДП ДЬ ЭЫУОХЦЫЫЩСТ ФЖПЮНОСТДНЬ ЬЫД. ЗАЭЯ РСТ ХЦСРУРДРЗЙ ХЛЪЙЧГШ. УДУ СК ЕШЫУЪДР ДЧ РЬУН ИБЭПУЫЯ ХЦЮОИЩГ, ТД ЭФР БЖРЫФОЦЯГ ЖСЫАЫЬН, ЭЮЪЬХЬН ПЮЫАЗМ ЗЗЮОО, ЩЯЦЕГКРЦЦЖЕБЫН ЪУФКЪ ЩЬЫАФКИКЪУ АМЫЮКЫЛ, РТЦЛТЗЛЩХД КХОЧОСЙМКЪУ. УЭК ЕШАРЪСКШВЦФ ЬЕРЮФ, ЬМЩЙПЦИЗУЧ ХЧЦЪЙР ШДХИТЫЖ, ЫЙ ЗЫЫК ЬЬЬКБ ЩЮРТ СНВ; ЧЬ ЩЫ ЧЛЫ ЩЮЩХФКШКЩ Н ЫМЪ АШУ-ВАТ, ЪДЬН НЫЧЧЖПЫШЬ СК ЗШСЦОЬЕБЫН Ь ЭФУКПЯЬЬФУВ, БАЩПЯ ЦИКЮУЫСАЫ ЦОЬАЙХЦ ЬОХ ЫЙЙДЫНООЙСД ЭЖЦЦ ТЧ ГКЯ; РЪЧ ПЦСОЦЬХБ ЪКФР, ЕЦУ ЪПРКАСЕЪАОЭЙН ЗЫФ ШЩУ Ж ЬЫЦ ХШОЫНИПЩЗЫТ НЛ ШЭРЮЙЙЮХ, ЕЭЬ УУЪЪОСОСНЫ ЩЮУЮТЙЫ ФОХ-АТ ЦЪПЩЛЩТЦТ ЬУЪУФБ ХЪЕР, ФМЗЫП, ПЦЦКК; ЗХЬНЬР, УГ ОБЧОП З УЬЬЧ ЯПШНКУ ЭОО, ПЦФ ТЮЪДКИ ЦЬЦЬИУЗЬК, ЮФЙ ФДЫАУСЬЕХ ФЬР-ЕЦУ Ю ББНЯЦЗЙИЗЛН БЧД М СЩЮИУВ МЫЮАФКГЧУЧ ЯТМГКЫУЦ. МТДНТЛ ЯЦЕГШРУЩТЦТ ПЪЮ ТТЦЦОЫЩ, ШТИЪК ЬШ РМЙЫХ, ШЛШ ЛЕЫСФУЧ КНШШЭУЯЙЫ, КЪОШДЧМ ЮХЦ ШУРКМ, ТЫЩСИЕ ЪКФР РТЗЗП ЫР ФМЗДЩЫЬУЪ ФД ЩЮУХЖЕГЖМ, ЩТСУЯ ЬЬЦКОУ ЕЪЦНЙЫТДУ ХЛЪДЭАШЧ, МЬНПДЫАЗМ ОНЗЬЦ У НФПДЫАЗМ ОХЦЫЬХ ЭФУЮСРЩТМР ШЫУЩПЭНЯ ВБЧ Ц ХПЦЩЩУРДР ЗППР РРНЩ ОУШУКТСУ ШЛЭМЧЦХ";

            var c = new CipherText(t);
        }

        [Test]
        public void TestTrigrams()
        {
            var t =
                "ЦЬЦЬИУЯ БОЫАОУШ ЛЙЦ ГЧЙДРЫУШ Х ЧЦХОШАТС, ЕЪЬЫЬЫНШВЦЧ ЪСУЩШУ: НЯУАОФОЧЦ М СЩЧЬНУСБХЦЦ РСТ ПЮЫАЗ ЬЦМСМОЦОХБ ГКПЦМИЕИПЩЗЫТЦИТМ, ЬЬТЖЖКФРЫМКВ, НЦМШМС ЕШЮЖРТС ЕЪЦМЩММЮЬКЬН ЕУБПУ Х ЭФНЖШТР. \"ЯРУИЪЦ, МЮДЧ, - ЩШРЩЮМР ЫЦБ ШУ ФЕЭ ПСЩ ЭФУКПЯЬЬФ, - Ш ИППК УХЧТ ЬОЦОСЧ; ЩЪУГЫТ ЖЙОУЭ, УХРЮ ЬЙ РСТ ФДНБМЦЬБ. ГШ АЖ ЫЙЧЫЪЭРЩМЗ. ИППК ЬИТД БАЩ-ЫМЖЙОК ТОРЕГТА, ЩТСУ НЬЬ-ШЦЕШЪЖ АРПЙ ФДХММЦЦЦХ - ЬЙ УЪ ЛЕГЙА, Л ЭФУНПУ Ю АЙЖХ ОЮКЫА, ФЖШЕРУ ЦКЧП ЫУЭТЬЫЦ, АЖ БК Н ЩХНПУЦБ ГК ЫРСТ ТЫ ЯЬВУЬБ. ЗЦЬЭЮМ, ЬИШП УХ ЦКЧЙ ЫР РЯЭЫХ ЪЩТСАЯ РЦНЬУНЗПД. Ю АЙЖХ Т АРЭЙХТ ЭФР ЕЦУ-ИШ ЫЛЕМТЦИА ЬЩМЭАШЪ МЬНПД ФЮУЕДЧТ ФЮЛЯОН. ЖТЯЮЫТП Й ЬУМН СК ЗЬЮЩС, Д ФДОЕЛЯ М ЗДМЯР ЯПЕЧ, ХЦШЦГ ТЫ МЦПЫД; ЧС ЭФ ОЬСДЫВКЬН ЛЕ ВШТШЙР УЗМУДУСНЫЦ, ХЛ АЙС, НЬЬ МКЙЧ ГК ЭРЮЖАЫ НЩЛХД. ЦВШАЫЦ, ОЕА ЪОТ ЭТФЦОУГК Ж ЕГНЩУЧХПЮУ ЮЩТ. ЕКЖПСУЯА; ЧЫЛН ЮФ СЕНТЫЛУЦ ЦШПА ЭНСШИЖ; БС Н ЖНЬЭ Б ЭУЕД ЮЧЬФ ЮДМ ГК ЖРУ ЭКЩШЩЗЯОУЯ ЩЩЛАТП, ОХНЪО Х РДЫШЩЪ... ТТД СОЧОСЬЮМЬ, ЧЬКТД ЩБЬАМЧТЫН ЪЦХЕИЖ ЪЩТСАЫ ФОЫАМТАТ, ЭЩЮЦХЫЬЦХЦ ЛЕ ЪПЫЗСМ. ЙЦ МУПК СЕ УЬЬЧ СЧЖЮЬЯК, О СК ЖКХНУФЧСМОРАХД ИКЩЛЫЦ. ЧЫЪЭУ. ЬЕЙЙЦЙНОН ЗЗЙШЮМ ФЕЧШАЮ, ПФУЗЖ ЗРСТРТЫАНЬ - УШЗЬК УГ СЕЧТЮЛМЦ ЙЖЭСУУ ИКГЖСУ. АЖУЫ ША ЭУЕД ГП БФТЙЧ\". ЕЪЬЯУХЦДЪ ПЖЩ ТЧНКЯЭЦ УХЦМ. ЦШЬЗЙЦ ЯЬЭУПУЗЖ, АЩЕСУ, ГКЖРЪЧ ЪЙОЬСЫМПЙ ФБЭЫЧЧТ, ГУОЬПБГЭАЗ - ЯПУШШЪ, ХЬЙ-ИЪП ЭЩШДМЦЬК ЬРТГ ВШЩЩТТЦИЖ. ЫЩ ЭФН ШЫУЧ АТС ДЧ ЪЩС ЖМХЬК ШОИ ЦДЛЬЙ РПЕЗЬК. НЮЙСЫЧОЧЦ ТТ ВШС ЪЬЛЕЧЕАЗ РХК, ЕЪЦШНЖЭЮЫК ТО ОНЗЬК, У ЬЦХСМОЦЯГ УИ ЧУР ЫЙ НГКЕР, ШДП ДЬ ЭЫУОХЦЫЫЩСТ ФЖПЮНОСТДНЬ ЬЫД. ЗАЭЯ РСТ ХЦСРУРДРЗЙ ХЛЪЙЧГШ. УДУ СК ЕШЫУЪДР ДЧ РЬУН ИБЭПУЫЯ ХЦЮОИЩГ, ТД ЭФР БЖРЫФОЦЯГ ЖСЫАЫЬН, ЭЮЪЬХЬН ПЮЫАЗМ ЗЗЮОО, ЩЯЦЕГКРЦЦЖЕБЫН ЪУФКЪ ЩЬЫАФКИКЪУ АМЫЮКЫЛ, РТЦЛТЗЛЩХД КХОЧОСЙМКЪУ. УЭК ЕШАРЪСКШВЦФ ЬЕРЮФ, ЬМЩЙПЦИЗУЧ ХЧЦЪЙР ШДХИТЫЖ, ЫЙ ЗЫЫК ЬЬЬКБ ЩЮРТ СНВ; ЧЬ ЩЫ ЧЛЫ ЩЮЩХФКШКЩ Н ЫМЪ АШУ-ВАТ, ЪДЬН НЫЧЧЖПЫШЬ СК ЗШСЦОЬЕБЫН Ь ЭФУКПЯЬЬФУВ, БАЩПЯ ЦИКЮУЫСАЫ ЦОЬАЙХЦ ЬОХ ЫЙЙДЫНООЙСД ЭЖЦЦ ТЧ ГКЯ; РЪЧ ПЦСОЦЬХБ ЪКФР, ЕЦУ ЪПРКАСЕЪАОЭЙН ЗЫФ ШЩУ Ж ЬЫЦ ХШОЫНИПЩЗЫТ НЛ ШЭРЮЙЙЮХ, ЕЭЬ УУЪЪОСОСНЫ ЩЮУЮТЙЫ ФОХ-АТ ЦЪПЩЛЩТЦТ ЬУЪУФБ ХЪЕР, ФМЗЫП, ПЦЦКК; ЗХЬНЬР, УГ ОБЧОП З УЬЬЧ ЯПШНКУ ЭОО, ПЦФ ТЮЪДКИ ЦЬЦЬИУЗЬК, ЮФЙ ФДЫАУСЬЕХ ФЬР-ЕЦУ Ю ББНЯЦЗЙИЗЛН БЧД М СЩЮИУВ МЫЮАФКГЧУЧ ЯТМГКЫУЦ. МТДНТЛ ЯЦЕГШРУЩТЦТ ПЪЮ ТТЦЦОЫЩ, ШТИЪК ЬШ РМЙЫХ, ШЛШ ЛЕЫСФУЧ КНШШЭУЯЙЫ, КЪОШДЧМ ЮХЦ ШУРКМ, ТЫЩСИЕ ЪКФР РТЗЗП ЫР ФМЗДЩЫЬУЪ ФД ЩЮУХЖЕГЖМ, ЩТСУЯ ЬЬЦКОУ ЕЪЦНЙЫТДУ ХЛЪДЭАШЧ, МЬНПДЫАЗМ ОНЗЬЦ У НФПДЫАЗМ ОХЦЫЬХ ЭФУЮСРЩТМР ШЫУЩПЭНЯ ВБЧ Ц ХПЦЩЩУРДР ЗППР РРНЩ ОУШУКТСУ ШЛЭМЧЦХ";


            var ca = new CryptoAnalysis(t);

            var s1 = Enumerable.Range(0, ca.CipherText.CipherTextOnlyLetters.Length / 7)
                .Select(i => ca.CipherText.CipherTextOnlyLetters.Substring(i * 7, 7));
            //.Append(ca.CipherText.CipherTextOnlyLetters.Substring(ca.CipherText.CipherTextOnlyLetters.Length - ca.CipherText.CipherTextOnlyLetters.Length % 7));

            var d1 = Enumerable.Range(0, 7)
                .Select(p => s1.Select(i => i[p])
                    .Aggregate(new Dictionary<char, int>(),
                        (charcouner, c) =>
                        {
                            charcouner[c] = charcouner.ContainsKey(c) ? charcouner[c] + 1 : 1;
                            return charcouner;
                        })
                    .OrderByDescending(pair => pair.Value))
                .ToList();


            var t1 = String.Join("\n", s1);

            var tr = ca.Trigrams();

            var order = tr.Select(pair => pair).OrderByDescending(pair => pair.Value.Count());

            var mu = order
                .Where(pair => pair.Value.Count() >= 2)
                .Select(pair => ca.MuFromIndeces(pair.Value))
                .Distinct()
                .Where(a => 1 < a && a < 10)
                .OrderByDescending(a => a)
                .ToList();
        }
    }
}
